import mongoose from "mongoose";
import { getHISConnection } from "../config/hisDatabase.js";

// HIS Diet Chart Schema for Hospital Information System
const hisDietChartSchema = new mongoose.Schema(
  {
    // Primary Identifiers
    hisDietChartId: {
      type: String,
      required: true,
      unique: true,
    },
    hisPatientId: {
      type: String,
      required: true,
      ref: "HISPatient",
    },
    hospitalId: {
      type: String,
      required: true,
      default: "AYUR_HOSP_001",
    },

    // Request Information
    requestedBy: {
      doctorName: { type: String, required: true },
      doctorId: { type: String, required: true },
      department: { type: String, default: "Ayurveda" },
    },
    requestDate: {
      type: Date,
      required: true,
      default: Date.now,
    },
    priority: {
      type: String,
      enum: ["Low", "Normal", "High", "Urgent"],
      default: "Normal",
    },

    // Diet Chart Request Details
    requestType: {
      type: String,
      required: true,
      enum: [
        "Weight Management",
        "Diabetic Management",
        "Hypertension Control",
        "Digestive Health",
        "Immunity Boost",
        "General Wellness",
        "Post-Surgery Recovery",
        "Chronic Disease Management",
      ],
    },
    specialRequirements: {
      type: String,
      trim: true,
    },

    // Patient Medical Context
    patientCondition: {
      type: String,
      required: true,
    },
    constitution: {
      type: String,
      required: true,
    },
    currentSymptoms: [String],
    dietaryRestrictions: [String],

    // Diet Chart Content (Generated by Ayurvedic System)
    dietChart: {
      morningMeal: {
        time: String,
        items: [String],
        instructions: String,
      },
      breakfast: {
        time: String,
        items: [String],
        instructions: String,
      },
      midMorningSnack: {
        time: String,
        items: [String],
        instructions: String,
      },
      lunch: {
        time: String,
        items: [String],
        instructions: String,
      },
      eveningSnack: {
        time: String,
        items: [String],
        instructions: String,
      },
      dinner: {
        time: String,
        items: [String],
        instructions: String,
      },
      bedtime: {
        time: String,
        items: [String],
        instructions: String,
      },
    },

    // Ayurvedic Recommendations
    ayurvedicGuidelines: {
      doshaBalance: String,
      seasonalConsiderations: String,
      lifestyleRecommendations: [String],
      foodCombinations: [String],
      avoidFoods: [String],
    },

    // Status and Tracking
    status: {
      type: String,
      enum: ["Pending", "In Progress", "Generated", "Delivered", "Reviewed"],
      default: "Pending",
    },
    generatedBy: {
      systemId: String,
      aiModel: String,
      generatedAt: Date,
      doctorApproved: { type: Boolean, default: false },
      approvedBy: String,
      approvedAt: Date,
    },

    // Integration Metadata
    createdAt: {
      type: Date,
      default: Date.now,
    },
    updatedAt: {
      type: Date,
      default: Date.now,
    },
    deliveredToHIS: {
      type: Boolean,
      default: false,
    },
    deliveryDate: {
      type: Date,
    },

    // Quality Metrics
    patientFeedback: {
      rating: { type: Number, min: 1, max: 5 },
      comments: String,
      followUpRequired: { type: Boolean, default: false },
    },
  },
  {
    timestamps: true,
    collection: "hisdietcharts",
  }
);

// Indexes for better query performance
hisDietChartSchema.index({ hisPatientId: 1 });
hisDietChartSchema.index({ status: 1 });
hisDietChartSchema.index({ requestDate: -1 });
hisDietChartSchema.index({ priority: 1, status: 1 });
hisDietChartSchema.index({ hospitalId: 1 });

// Pre-save middleware
hisDietChartSchema.pre("save", function (next) {
  this.updatedAt = new Date();

  // Auto-generate diet chart ID if not provided
  if (!this.hisDietChartId) {
    this.hisDietChartId =
      "HD" +
      Date.now().toString().slice(-8) +
      Math.random().toString(36).substr(2, 4).toUpperCase();
  }

  next();
});

// Static method to generate diet chart ID
hisDietChartSchema.statics.generateDietChartId = function () {
  return (
    "HD" +
    Date.now().toString().slice(-8) +
    Math.random().toString(36).substr(2, 4).toUpperCase()
  );
};

// Virtual for request summary
hisDietChartSchema.virtual("requestSummary").get(function () {
  return `${this.requestType} for ${this.patientCondition} - Priority: ${this.priority}`;
});

// Create model using HIS database connection
let HISDietChartModel;

try {
  const hisConnection = getHISConnection();
  HISDietChartModel = hisConnection.model("HISDietChart", hisDietChartSchema);
} catch (error) {
  // Model will be created when connection is established
  HISDietChartModel = null;
}

// Function to get model with connection
const getHISDietChartModel = async () => {
  if (!HISDietChartModel) {
    const { connectHISDatabase } = await import("../config/hisDatabase.js");
    const connection = await connectHISDatabase();
    HISDietChartModel = connection.model("HISDietChart", hisDietChartSchema);
  }
  return HISDietChartModel;
};

export default HISDietChartModel;
export { getHISDietChartModel };
